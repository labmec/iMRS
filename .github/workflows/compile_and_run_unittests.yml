name: Compile And Run Unit Tests

on:
  push:
    branches: [AutomaticUnitTesting]
  pull_request:
    branches: [AutomaticUnitTesting]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [[ubuntu-latest]]

    steps:      
    - uses: actions/checkout@v2    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: 1.73.0    
        platform_version: 18.04
        # boost_install_dir: /home/runner/work/iMRS
              
    - name: Clone External libInterpolate
      uses: actions/checkout@v2
      with:
        path: ./libinterpolate
        repository: CD3/libInterpolate
        ref: master
    - name: Boost libs
        run: echo "Boost path $BOOST_ROOT"        
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}      
    - name: Set up build environment for External libinterpolate
      shell: bash
      working-directory: ${{github.workspace}}/libinterpolate
      run: cmake -E make_directory build
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
    - name: Configure CMake External libinterpolate
      shell: bash
      working-directory: ${{github.workspace}}/libinterpolate/build
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/libinterpolate_install
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}              
    - name: Build And Install External libinterpolate
      working-directory: ${{github.workspace}}/libinterpolate/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install
      env:
        MAKEFLAGS: "-j4"                  

    - name: Clone External NeoPZ
      uses: actions/checkout@v2
      with:
        path: ./neopz
        repository: labmec/neopz
        ref: develop
    - name: Set up build environment for External NeoPZ
      shell: bash
      working-directory: ${{github.workspace}}/neopz
      run: cmake -E make_directory build
    - name: Configure CMake External NeoPZ
      shell: bash
      working-directory: ${{github.workspace}}/neopz/build
      # run: cmake $GITHUB_WORKSPACE -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/neopz_install -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      run: cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/neopz_install
    - name: Build And Install External NeoPZ
      working-directory: ${{github.workspace}}/neopz/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install
      env:
        MAKEFLAGS: "-j4"                  

    - name: Configure iMRS CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_UNITTESTING=ON
    - name: Build iMRS
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      env:
        MAKEFLAGS: "-j4"
    - name: Run Unit Tests
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
    
